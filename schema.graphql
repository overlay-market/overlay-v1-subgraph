type Position @entity {
  id: ID!
  number: BigInt!
  collateralManager: Bytes!
  market: Bytes!
  isLong: Boolean!
  leverage: BigInt!
  pricePoint: PricePoint! 
  oiShares: BigInt!
  debt: BigInt!
  cost: BigInt!
  compounding: BigInt!
  liquidationPrice: BigDecimal!
  totalSupply: BigInt!
}

type CollateralManager @entity {
  id: ID!
  address: Bytes!
}

type Account @entity {
  id: ID!
  address: Bytes!
  balances: [Balance!]! @derivedFrom(field: "account")
  balanceOVL: BalanceOVL! @derivedFrom(field: "account")
}

type PricePoint @entity {
  id: ID!
  number: BigInt!
  bid: BigInt!
  ask: BigInt!
  index: BigInt!
}

type PricePointCount @entity {
  id: ID!
  count: BigInt!
}

type Market @entity {
  id: ID!
  feed: Bytes!
  base: Bytes!
  quote: Bytes!
  baseName: String!
  quoteName: String!
  baseSymbol: String!
  quoteSymbol: String!
  # prices: [ PricePoint! ]! @derivedFrom(field: "id")
  oiLong: BigInt!
  oiLongShares: BigInt!
  oiLongQueued: BigInt!
  oiShort: BigInt!
  oiShortShares: BigInt!
  oiShortQueued: BigInt!
  oiCap: BigInt!
  updatePeriod: BigInt!
  compoundingPeriod: BigInt!
  positions: [ Position! ]! @derivedFrom(field: "market")
  prices: [ PricePoint! ]! @derivedFrom(field: "market")
  currentPrice: PricePoint!
}

type Balance @entity {
  id: ID!
  account: Account!
  position: BigInt!
  shares: BigInt!
}

type BalanceOVL @entity {
  id: ID!
  account: Account!
  balance: BigInt!
  locked: BigInt!
}

type MarketManifest @entity {
  id: ID!
  markets: [ Bytes! ]!
  compoundings: [ BigInt! ]!
  updates: [ BigInt! ]!
}

type MarketMonitor @entity {
  id: ID!
  positions: [ Position! ]!
}
